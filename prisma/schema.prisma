// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//Prisma Client returns all DateTime as ISO 8601-formatted strings.

generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model User {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  password  String
  posts     Post[]
  profile   Profile?
  accounts    Account[]
  tokens      Token[]
  role      Role     @default(USER)
  likes     Like[]
  avatar    Avatar?

  MiniPost MiniPost[]
}

model Post {
  id          String   @id @unique @default(uuid())
  title       String
  description String
  body        String
  postImg     String
  createdBy   String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String

  categories Category[]
  likes      Like[]

  @@index([id, userId])
  @@index([userId])
}

model Avatar {
  id          String @id @unique @default(uuid())
  description String
  postImg     String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @unique
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

// https://github.com/prisma/docs/blob/main/content/200-concepts/100-components/02-prisma-client/030-crud.mdx
model Category {
  id        String     @id @unique @default(uuid())
  name      String     @unique
  posts     Post[]
  miniposts MiniPost[]
}

model Profile {
  id              String   @id @unique @default(uuid())
  firstName       String
  lastName        String
  bio             String
  title           String
  currentLocation String
  pronouns        Pronouns @default(THEY)
  occupation      String
  profilePicture  String   @default("https://remix-bucket.s3.us-east-2.amazonaws.com/Derick2022.jpeg")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  email           String
}

model MiniPost {
  id         String     @id @unique @default(uuid())
  title      String
  body       String
  published  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  categories Category[]
}

enum Pronouns {
  THEY
  HE
  SHE
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}