// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//Prisma Client returns all DateTime as ISO 8601-formatted strings.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  firstName String
  lastName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  password  String
  posts     Post[]
  profile   Profile?
  role      Role      @default(USER)
  likes     Like[]
  comments  Comment[]

  likeComments LikeComment[]
}

model Post {
  id           String        @id @unique @default(uuid())
  title        String
  description  String
  body         String
  postImg      String
  published    Boolean       @default(false)
  createdBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  likeComments LikeComment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  categories Category[]
  likes      Like[]
  Comment    Comment[]

  @@index([id, userId])
  @@index([userId])
}

model Comment {
  id           String        @id @default(uuid())
  message      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  parent       Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children     Comment[]     @relation("ParentChild")
  parentId     String?
  likeComments LikeComment[]
}

model LikeComment {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String
  Post      Post?   @relation(fields: [postId], references: [id])
  postId    String?

  @@id([userId, commentId])
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

// https://github.com/prisma/docs/blob/main/content/200-concepts/100-components/02-prisma-client/030-crud.mdx
model Category {
  id    String @id @unique @default(uuid())
  name  String @unique
  posts Post[]
}

model Profile {
  id              String   @id @unique @default(uuid())
  firstName       String
  lastName        String
  title           String
  bio             String
  birthDay        DateTime
  currentLocation String
  pronouns        Pronouns @default(THEY)
  occupation      String
  profilePicture  String   @default("https://remix-bucket.s3.us-east-2.amazonaws.com/Derick2022.jpeg")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
  email           String
}

enum Pronouns {
  THEY
  HE
  SHE
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
